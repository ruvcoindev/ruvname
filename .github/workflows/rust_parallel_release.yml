on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # v1.2.3
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

name: Create release

jobs:
  get_version:
    name: Get version from Git tag
    runs-on: ubuntu-22.04
    outputs:
      project_version: ${{ env.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Getting version
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Detected version: $VERSION"

  create_release:
    name: Create Release
    runs-on: ubuntu-22.04
    needs: get_version
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get_version.outputs.project_version }}
          name: v${{ needs.get_version.outputs.project_version }}
          body: |
            ## New
            * Added new features.
            ## Bug Fixes & Improvements
            * Various fixes and stability improvements.
            ## Documentation & others
            * Updated documentation.
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linux-nogui:
    name: Build .deb for ${{ matrix.arch }}
    needs: [create_release, get_version]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [amd64, i686, armhf, armlf, arm64]
        target: [
          x86_64-unknown-linux-musl,
          i686-unknown-linux-musl,
          armv7-unknown-linux-musleabihf,
          arm-unknown-linux-musleabi,
          aarch64-unknown-linux-musl
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fix APT sources and install deps
        run: |
          set -eux
          sudo rm -rf /etc/apt/sources.list.d/* /etc/apt/sources.list
          sudo tee /etc/apt/sources.list << 'EOF'
          deb http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu jammy-backports main restricted universe multiverse
          deb http://security.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
          EOF
          sudo apt update
          sudo apt install -y --no-install-recommends upx
          cargo install cross --locked

      - name: Build and package .deb
        run: |
          PKGARCH=${{ matrix.arch }} \
          TARGET=${{ matrix.target }} \
          contrib/deb/generate.sh

      - name: Upload .deb
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ruvname-${{ matrix.arch }}-v${{ needs.get_version.outputs.project_version }}.deb
          asset_name: ruvname-linux-${{ matrix.arch }}-v${{ needs.get_version.outputs.project_version }}.deb
          asset_content_type: application/vnd.debian.binary-package

  build-and-upload-gui-zips:
    name: Build GUI ZIP (${{ matrix.os }})
    needs: [create_release, get_version]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Linux deps
        if: matrix.os == 'ubuntu-22.04'
        run: |
          set -eux
          sudo rm -rf /etc/apt/sources.list.d/* /etc/apt/sources.list
          sudo tee /etc/apt/sources.list << 'EOF'
          deb http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu jammy-backports main restricted universe multiverse
          deb http://security.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
          EOF
          sudo apt update
          sudo apt install -y --no-install-recommends libwebkit2gtk-4.0-dev upx

      - name: Build GUI (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: cargo build --release

      - name: Build GUI (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cargo build --release
          cargo build --release --features edge --target-dir edge

      - name: Set Linux env
        if: matrix.os == 'ubuntu-22.04'
        run: |
          echo "BIN_PATH=target/release/ruvname" >> $GITHUB_ENV
          echo "ZIP_NAME=ruvname-linux-amd64-v${{ needs.get_version.outputs.project_version }}-gui.zip" >> $GITHUB_ENV

      - name: Set Windows env
        if: matrix.os == 'windows-latest'
        run: |
          echo "BIN_PATH=target/release/ruvname.exe" >> $GITHUB_ENV
          echo "ZIP_NAME=ruvname-windows-amd64-v${{ needs.get_version.outputs.project_version }}-gui.zip" >> $GITHUB_ENV
          echo "BIN_PATH_EDGE=edge/release/ruvname.exe" >> $GITHUB_ENV
          echo "ZIP_NAME_EDGE=ruvname-windows-amd64-v${{ needs.get_version.outputs.project_version }}-gui-edge.zip" >> $GITHUB_ENV

      - name: Optimize with UPX (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: upx --best ${{ env.BIN_PATH }} || echo "UPX not available"

      - name: Optimize with UPX (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          upx.exe --best target/release/ruvname.exe || echo "UPX failed"
          upx.exe --best edge/release/ruvname.exe || echo "UPX failed on edge"

      - name: Package GUI ZIP
        run: |
          mkdir -p dist
          cp ${{ env.BIN_PATH }} ruvname.toml README.md LICENSE adblock.txt dist/
          cd dist && zip -r ${{ env.ZIP_NAME }} *

      - name: Package Edge ZIP
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p dist
          cp ${{ env.BIN_PATH_EDGE }} ruvname.toml README.md LICENSE adblock.txt dist/
          cd dist && zip -r ${{ env.ZIP_NAME_EDGE }} *

      - name: Upload GUI ZIP
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist/${{ env.ZIP_NAME }}
          asset_name: ${{ env.ZIP_NAME }}
          asset_content_type: application/zip

      - name: Upload Edge ZIP
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist/${{ env.ZIP_NAME_EDGE }}
          asset_name: ${{ env.ZIP_NAME_EDGE }}
          asset_content_type: application/zip
