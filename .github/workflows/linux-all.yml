# .github/workflows/linux-all.yml
name: Linux - All Builds

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # v1.2.3
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

jobs:
  get_version:
    name: Get Version
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ env.VERSION }}
    steps:
      - uses: actions/checkout@v4
      - run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

  create_release:
    name: Create Draft Release
    needs: get_version
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get_version.outputs.version }}
          name: v${{ needs.get_version.outputs.version }}
          body: |
            ## New
            * Full Linux & OpenWrt support
            ## Bug Fixes
            * Various fixes and stability improvements.
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # === Сборка всех .deb для всех архитектур ===
  build_deb:
    name: Build .deb for ${{ matrix.arch }}
    needs: create_release
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [amd64, i686, armhf, armlf, arm64, mips, mipsel]
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt update
          sudo apt install -y upx
          cargo install cross
      - name: Build for ${{ matrix.arch }}
        run: |
          PKGARCH=${{ matrix.arch }} cross build --target ${{ matrix.target }} --release --no-default-features
          PKGARCH=${{ matrix.arch }} bash contrib/deb/generate.sh
      - name: Upload .deb
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ruvname-${{ matrix.arch }}-v${{ needs.get_version.outputs.version }}.deb
          asset_name: ruvname-linux-${{ matrix.arch }}-v${{ needs.get_version.outputs.version }}.deb
          asset_content_type: application/vnd.debian.binary-package
    env:
      TARGET_AMD64: x86_64-unknown-linux-musl
      TARGET_I686: i686-unknown-linux-musl
      TARGET_ARMHF: armv7-unknown-linux-musleabihf
      TARGET_ARMLF: arm-unknown-linux-musleabi
      TARGET_ARM64: aarch64-unknown-linux-musl
      TARGET_MIPS: mips-unknown-linux-musl
      TARGET_MIPSEL: mipsel-unknown-linux-musl
      matrix:
        target: ${{ env['TARGET_' + matrix.arch] }}

  # === Сборка .zip с GUI и без GUI для x86_64 ===
  build_linux_zip:
    name: Build Linux ZIP (x86_64)
    needs: create_release
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: sudo apt install -y libwebkit2gtk-4.0-dev upx
      - name: Build GUI
        run: cargo build --release
      - name: Build NoGUI
        run: cargo build --release --no-default-features
      - name: Package GUI ZIP
        run: |
          mkdir -p dist
          cp target/release/ruvname ruvname.toml README.md LICENSE dist/
          cd dist && zip -r ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-gui.zip *
      - name: Package NoGUI ZIP
        run: |
          mkdir -p dist
          cp target/release/ruvname ruvname.toml README.md LICENSE dist/
          cd dist && zip -r ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-nogui.zip *
      - name: Upload GUI ZIP
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist/ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-gui.zip
          asset_name: ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-gui.zip
          asset_content_type: application/zip
      - name: Upload NoGUI ZIP
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist/ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-nogui.zip
          asset_name: ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-nogui.zip
          asset_content_type: application/zip

  # === Сборка .ipk для OpenWrt (mipsel) ===
  build_ipk:
    name: Build OpenWrt .ipk
    needs: create_release
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Install cross
        run: cargo install cross
      - name: Build for mipsel
        run: cross build --target mipsel-unknown-linux-musl --release
      - name: Setup OpenWrt SDK
        run: |
          wget https://downloads.openwrt.org/releases/24.10.0/targets/generic/mipsel_24kc/openwrt-sdk-24.10.0-glibc-mipsel_24kc.Linux-x86_64.tar.xz
          tar -xf openwrt-sdk-*.tar.xz
          mv openwrt-sdk-* openwrt-sdk
      - name: Copy package
        run: |
          cp -r contrib/openwrt/package/ruvname openwrt-sdk/package/
          cp target/mipsel-unknown-linux-musl/release/ruvname openwrt-sdk/package/ruvname/
      - name: Build .ipk
        working-directory: openwrt-sdk
        run: |
          make defconfig
          make package/ruvname/compile V=s
      - name: Upload .ipk
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: openwrt-sdk/bin/packages/mipsel_generic/base/ruvname_*.ipk
          asset_name: ruvname-openwrt-mipsel-v${{ needs.get_version.outputs.version }}.ipk
          asset_content_type: application/octet-stream
