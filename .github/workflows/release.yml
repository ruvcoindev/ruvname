# .github/workflows/release.yml
name: üöÄ Full Release: Linux, Windows, OpenWrt

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

jobs:
  get_version:
    name: Get Version
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ env.VERSION }}
    steps:
      - uses: actions/checkout@v4
      - run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

  create_release:
    name: Create Draft Release
    needs: get_version
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get_version.outputs.version }}
          name: v${{ needs.get_version.outputs.version }}
          body: |
            ## üöÄ Full Release
            * Linux: amd64, i686, arm64, armhf, armlf, mips, mipsel
            * Windows: x64, x86 (32-bit), GUI & NoGUI
            * OpenWrt: .ipk for all router architectures
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # === –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö .deb –¥–ª—è Linux ===
  build_deb:
    name: Build .deb for ${{ matrix.arch }}
    needs: create_release
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [amd64, i686, armhf, armlf, arm64, mips, mipsel]
        target: [
          x86_64-unknown-linux-musl,
          i686-unknown-linux-musl,
          armv7-unknown-linux-musleabihf,
          arm-unknown-linux-musleabi,
          aarch64-unknown-linux-musl,
          mips-unknown-linux-musl,
          mipsel-unknown-linux-musl
        ]
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt update
          sudo apt install -y upx
          cargo install cross
      - name: Build & package
        run: |
          PKGARCH=${{ matrix.arch }} \
          TARGET=${{ matrix.target }} \
          cross build --target ${{ matrix.target }} --release --no-default-features && \
          PKGARCH=${{ matrix.arch }} bash contrib/deb/generate.sh
      - name: Upload .deb
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ruvname-${{ matrix.arch }}-v${{ needs.get_version.outputs.version }}.deb
          asset_name: ruvname-linux-${{ matrix.arch }}-v${{ needs.get_version.outputs.version }}.deb
          asset_content_type: application/vnd.debian.binary-package

  # === –°–±–æ—Ä–∫–∞ .zip –¥–ª—è Linux (GUI –∏ NoGUI) ===
  build_linux_zip:
    name: Build Linux ZIP (x86_64)
    needs: create_release
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: sudo apt install -y libwebkit2gtk-4.0-dev upx
      - name: Build GUI
        run: cargo build --release
      - name: Build NoGUI
        run: cargo build --release --no-default-features
      - name: Package GUI ZIP
        run: |
          mkdir -p dist
          cp target/release/ruvname ruvname.toml README.md LICENSE dist/
          cd dist && zip -r ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-gui.zip *
      - name: Package NoGUI ZIP
        run: |
          mkdir -p dist
          cp target/release/ruvname ruvname.toml README.md LICENSE dist/
          cd dist && zip -r ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-nogui.zip *
      - name: Upload GUI ZIP
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist/ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-gui.zip
          asset_name: ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-gui.zip
          asset_content_type: application/zip
      - name: Upload NoGUI ZIP
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist/ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-nogui.zip
          asset_name: ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-nogui.zip
          asset_content_type: application/zip

  # === –°–±–æ—Ä–∫–∞ .ipk –¥–ª—è OpenWrt ===
  build_ipk:
    name: Build .ipk for ${{ matrix.arch }}
    needs: create_release
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - arch: mipsel
            target: mipsel-unknown-linux-musl
            sdk_url: https://downloads.openwrt.org/releases/24.10.0/targets/generic/mipsel_24kc/openwrt-sdk-24.10.0-glibc-mipsel_24kc.Linux-x86_64.tar.xz
            sdk_dir: openwrt-sdk-24.10.0-glibc-mipsel_24kc.Linux-x86_64
            package_path: bin/packages/mipsel_generic/base/ruvname_*.ipk
            asset_name: ruvname-openwrt-mipsel-v${{ needs.get_version.outputs.version }}.ipk
          - arch: mips
            target: mips-unknown-linux-musl
            sdk_url: https://downloads.openwrt.org/releases/24.10.0/targets/generic/mips_24kc/openwrt-sdk-24.10.0-glibc-mips_24kc.Linux-x86_64.tar.xz
            sdk_dir: openwrt-sdk-24.10.0-glibc-mips_24kc.Linux-x86_64
            package_path: bin/packages/mips_24kc/base/ruvname_*.ipk
            asset_name: ruvname-openwrt-mips-v${{ needs.get_version.outputs.version }}.ipk
          - arch: armhf
            target: armv7-unknown-linux-musleabihf
            sdk_url: https://downloads.openwrt.org/releases/24.10.0/targets/bcm27xx/cortexa7/openwrt-sdk-24.10.0-bcm27xx_cortexa7_glibc.Linux-x86_64.tar.xz
            sdk_dir: openwrt-sdk-24.10.0-bcm27xx_cortexa7_glibc.Linux-x86_64
            package_path: bin/packages/arm_cortex-a7/base/ruvname_*.ipk
            asset_name: ruvname-openwrt-armhf-v${{ needs.get_version.outputs.version }}.ipk
          - arch: armlf
            target: arm-unknown-linux-musleabi
            sdk_url: https://downloads.openwrt.org/releases/24.10.0/targets/bcm27xx/bcm2708/openwrt-sdk-24.10.0-bcm27xx_bcm2708_glibc.Linux-x86_64.tar.xz
            sdk_dir: openwrt-sdk-24.10.0-bcm27xx_bcm2708_glibc.Linux-x86_64
            package_path: bin/packages/arm_arm926ej-s/base/ruvname_*.ipk
            asset_name: ruvname-openwrt-armlf-v${{ needs.get_version.outputs.version }}.ipk
          - arch: arm64
            target: aarch64-unknown-linux-musl
            sdk_url: https://downloads.openwrt.org/releases/24.10.0/targets/ipq60xx/aarch64_cortex-a53/openwrt-sdk-24.10.0-ipq60xx_glibc.Linux-x86_64.tar.xz
            sdk_dir: openwrt-sdk-24.10.0-ipq60xx_glibc.Linux-x86_64
            package_path: bin/packages/aarch64_cortex-a53/base/ruvname_*.ipk
            asset_name: ruvname-openwrt-arm64-v${{ needs.get_version.outputs.version }}.ipk
    steps:
      - uses: actions/checkout@v4
      - name: Install cross
        run: cargo install cross
      - name: Build for ${{ matrix.arch }}
        run: cross build --target ${{ matrix.target }} --release
      - name: Setup OpenWrt SDK
        run: |
          wget ${{ matrix.sdk_url }}
          tar -xf openwrt-sdk-*.tar.xz
          mv ${{ matrix.sdk_dir }} openwrt-sdk
      - name: Copy package
        run: |
          mkdir -p openwrt-sdk/package/ruvname/files/etc/init.d
          mkdir -p openwrt-sdk/package/ruvname/files/etc/config
          cp contrib/openwrt/package/ruvname/Makefile openwrt-sdk/package/ruvname/
          cp contrib/openwrt/files/etc/init.d/ruvname openwrt-sdk/package/ruvname/files/etc/init.d/
          cp contrib/openwrt/files/etc/config/ruvname openwrt-sdk/package/ruvname/files/etc/config/
          cp target/${{ matrix.target }}/release/ruvname openwrt-sdk/package/ruvname/
      - name: Build .ipk
        working-directory: openwrt-sdk
        run: |
          make defconfig
          make package/ruvname/compile V=s
      - name: Upload .ipk
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: openwrt-sdk/${{ matrix.package_path }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  # === –°–±–æ—Ä–∫–∞ Windows (x64 –∏ x86) ===
  build_windows:
    name: Build Windows ${{ matrix.arch }} (${{ matrix.type }})
    needs: create_release
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
        type: [gui, nogui]
        include:
          - arch: x64
            target: x86_64-pc-windows-msvc
            out_dir: x64
          - arch: x86
            target: i686-pc-windows-msvc
            out_dir: x86
    steps:
      - uses: actions/checkout@v4
      - name: Build ${{ matrix.type }}
        run: |
          if ("${{ matrix.type }}" -eq "gui") {
            cargo build --release --target ${{ matrix.target }}
          } else {
            cargo build --release --no-default-features --target ${{ matrix.target }}
          }
      - name: Package ZIP
        run: |
          mkdir dist/${{ matrix.out_dir }}
          cp target/${{ matrix.target }}/release/ruvname.exe ruvname.toml README.md LICENSE dist/${{ matrix.out_dir }}/
          Compress-Archive -Path dist/${{ matrix.out_dir }}/* -DestinationPath dist/ruvname-windows-${{ matrix.arch }}-v${{ needs.get_version.outputs.version }}-${{ matrix.type }}.zip
      - name: Upload ZIP
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist/ruvname-windows-${{ matrix.arch }}-v${{ needs.get_version.outputs.version }}-${{ matrix.type }}.zip
          asset_name: ruvname-windows-${{ matrix.arch }}-v${{ needs.get_version.outputs.version }}-${{ matrix.type }}.zip
          asset_content_type: application/zip
