# .github/workflows/release.yml
name: Release & Publish + ipk

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # v1.2.3

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

jobs:
  get_version:
    name: Get Version from Tag
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ env.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

  create_release:
    name: Create Release
    needs: get_version
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get_version.outputs.version }}
          name: v${{ needs.get_version.outputs.version }}
          body: |
            ## New Features
            * Added new features.
            ## Bug Fixes & Improvements
            * Various fixes and stability improvements.
            ## Documentation & Others
            * Updated documentation.
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_linux_gui:
    name: Build Linux GUI Binary (x86_64)
    needs: [create_release, get_version]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y libwebkit2gtk-4.0-dev upx

      - name: Build release (with GUI)
        run: cargo build --release

      - name: Package GUI
        run: |
          mkdir -p dist
          cp target/release/ruvname ruvname.toml README.md LICENSE adblock.txt dist/
          cd dist && zip -r ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-gui.zip *

      - name: Upload GUI asset
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist/ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-gui.zip
          asset_name: ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-gui.zip
          asset_content_type: application/zip

  build_linux_nogui:
    name: Build Linux NoGUI Binary (x86_64)
    needs: [create_release, get_version]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build release (no GUI)
        run: cargo build --release --no-default-features

      - name: Package NoGUI
        run: |
          mkdir -p dist
          cp target/release/ruvname ruvname.toml README.md LICENSE adblock.txt dist/
          cd dist && zip -r ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-nogui.zip *

      - name: Upload NoGUI asset
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist/ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-nogui.zip
          asset_name: ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}-nogui.zip
          asset_content_type: application/zip

  build_windows_nogui:
    name: Build Windows NoGUI Binary
    needs: [create_release, get_version]
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build release (no GUI)
        run: cargo build --release --no-default-features

      - name: Package NoGUI
        run: |
          mkdir dist
          cp target/release/ruvname.exe ruvname.toml README.md LICENSE adblock.txt dist/
          Compress-Archive -Path dist/* -DestinationPath dist/ruvname-windows-amd64-v${{ needs.get_version.outputs.version }}-nogui.zip

      - name: Upload Windows NoGUI
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist/ruvname-windows-amd64-v${{ needs.get_version.outputs.version }}-nogui.zip
          asset_name: ruvname-windows-amd64-v${{ needs.get_version.outputs.version }}-nogui.zip
          asset_content_type: application/zip

  build_deb:
    name: Build DEB Package (x86_64)
    needs: [create_release, get_version]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cross
        run: cargo install cross

      - name: Build with musl
        run: cross build --target x86_64-unknown-linux-musl --release

      - name: Build DEB package
        run: |
          PKGARCH=amd64 contrib/deb/generate.sh

      - name: Upload DEB
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ruvname-amd64-v${{ needs.get_version.outputs.version }}.deb
          asset_name: ruvname-linux-amd64-v${{ needs.get_version.outputs.version }}.deb
          asset_content_type: application/vnd.debian.binary-package

  build_ipk_arm64:
    name: Build OpenWrt .ipk for ARM64 (aarch64)
    needs: [create_release, get_version]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cross
        run: cargo install cross

      - name: Build for aarch64
        run: cross build --target aarch64-unknown-linux-musl --release

      - name: Setup OpenWrt SDK for aarch64 (ipq60xx)
        run: |
          wget https://downloads.openwrt.org/releases/24.10.0/targets/ipq60xx/aarch64_cortex-a53/openwrt-sdk-24.10.0-ipq60xx_glibc.Linux-x86_64.tar.xz
          tar -xf openwrt-sdk-*.tar.xz
          mv openwrt-sdk-* openwrt-sdk

      - name: Copy package
        run: |
          mkdir -p openwrt-sdk/package/ruvname/files/etc/init.d
          mkdir -p openwrt-sdk/package/ruvname/files/etc/config
          cp contrib/openwrt/package/ruvname/Makefile openwrt-sdk/package/ruvname/
          cp contrib/openwrt/package/ruvname/files/etc/init.d/ruvname openwrt-sdk/package/ruvname/files/etc/init.d/
          cp contrib/openwrt/package/ruvname/files/etc/config/ruvname openwrt-sdk/package/ruvname/files/etc/config/
          cp target/aarch64-unknown-linux-musl/release/ruvname openwrt-sdk/package/ruvname/

      - name: Build .ipk
        working-directory: openwrt-sdk
        run: |
          make defconfig
          make package/ruvname/compile V=s

      - name: Upload .ipk
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: openwrt-sdk/bin/packages/aarch64_cortex-a53/base/ruvname_*.ipk
          asset_name: ruvname-openwrt-arm64-v${{ needs.get_version.outputs.version }}.ipk
          asset_content_type: application/octet-stream
